generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AdminRank {
  편집장
  기자
}

enum DaumFeedStatus {
  READY
  PROCESSING
  SUCCESS
  ERROR
  FAIL
}

model Admin {
  adminId    String    @id @default(uuid()) @map("userId")
  name       String    @map("name")
  loginId    String    @unique @map("loginId")
  profileImg String?   @map("profileImg") @db.Text
  email      String    @unique @map("email")
  password   String    @map("password")
  rank       AdminRank @map("rank")
  createdAt  DateTime  @default(now()) @map("createdAt")
  updatedAt  DateTime  @updatedAt @map("updatedAt")

  Article Article[]

  @@map("Admin")
}

model Article {
  articleId       Int       @id @default(autoincrement()) @map("articleId")
  articleBanner   String    @map("articleBanner")
  articleTitle    String    @map("articleTitle") @db.Text
  articleSubTitle String    @map("articleSubTitle") @db.Text
  articleContent  String    @map("articleContent") @db.MediumText
  articleStatus   String    @default("publish") @map("articleStatus")
  publishedAt     DateTime? @map("publishedAt")
  isImportant     Boolean   @default(false) @map("isImportant")
  isBanner        Boolean   @default(false) @map("isBanner")
  bannerTime      DateTime? @map("bannerTime")
  views           Int       @default(0) @map("views")
  createdAt       DateTime  @default(now()) @map("createdAt")
  updatedAt       DateTime  @updatedAt @map("updatedAt")
  AdminId         String    @map("AdminId")
  CategoryId      Int       @map("CategoryId")

  daumContentId    String?         @unique(map: "Article_daumContentId_unique") @map("daumContentId") @db.VarChar(500)
  daumUuid         String?         @map("daumUuid") @db.VarChar(64)
  daumStatus       DaumFeedStatus? @map("daumStatus")
  daumPreviewPath  String?         @map("daumPreviewPath") @db.VarChar(255)
  daumLastPushedAt DateTime?       @map("daumLastPushedAt")

  admin        Admin          @relation(fields: [AdminId], references: [adminId])
  category     Category       @relation(fields: [CategoryId], references: [categoryId])
  ArticleTag   ArticleTag[]
  ArticleImage ArticleImage[]
  DaumFeedLog  DaumFeedLog[]

  @@map("Article")
}

model ArticleContentTempStorage {
  articleContentTempStorageId Int      @id @default(autoincrement()) @map("articleContentTempStorageId")
  uploadedBy                  String   @map("uploadedBy")
  imageUrls                   String   @map("imageUrls")
  createdAt                   DateTime @default(now()) @map("createdAt")
  updatedAt                   DateTime @updatedAt @map("updatedAt")

  @@map("ArticleContentTempStorage")
}

model ArticleImage {
  articleImageId  Int      @id @default(autoincrement()) @map("articleImageId")
  articleImageUrl String?  @map("articleImageUrl")
  ArticleId       Int      @map("ArticleId")
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")

  article Article @relation(fields: [ArticleId], references: [articleId], onDelete: Cascade)

  @@map("ArticleImage")
}

model Tag {
  tagId      Int          @id @default(autoincrement()) @map("tagId")
  tagName    String       @unique @map("tagName")
  createdAt  DateTime     @default(now()) @map("createdAt")
  updatedAt  DateTime     @updatedAt @map("updatedAt")
  ArticleTag ArticleTag[]

  @@map("Tag")
}

model ArticleTag {
  ArticleId Int @map("articleId")
  TagId     Int @map("tagId")

  article Article @relation(fields: [ArticleId], references: [articleId], onDelete: Cascade)
  tag     Tag     @relation(fields: [TagId], references: [tagId])

  @@id([ArticleId, TagId])
  @@map("ArticleTag")
}

model Advertisement {
  advertisementId       Int      @id @default(autoincrement()) @map("advertisementId")
  advertisementTitle    String   @map("advertisementTitle")
  advertisementImageUrl String   @map("advertisementImage")
  redirectUrl           String?  @map("redirectUrl")
  isActive              Boolean  @default(true) @map("isActive")
  clickCount            Int      @default(0) @map("clickCount")
  adMemo                String?  @map("adMemo") @db.Text
  adLocation            String   @map("adLocation")
  createdAt             DateTime @default(now()) @map("createdAt")
  updatedAt             DateTime @updatedAt @map("updatedAt")

  @@map("Advertisement")
}

model Category {
  categoryId       Int    @id @default(autoincrement()) @map("categoryId")
  categoryName     String @map("categoryName")
  parentCategoryId Int?   @map("parentCategoryId")

  parentCategory Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [categoryId])
  subCategories  Category[] @relation("CategoryToCategory")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Article Article[]

  @@map("Category")
}

model SubscribeUserInfo {
  subscribeUserInfoId String  @id @default(uuid()) @map("subscribeUserInfoId")
  subscribeUserName   String  @map("subscribeUserName")
  subscribeUserEmail  String  @unique @map("subscribeUserEmail")
  subscribeType       String? @map("subscribeType")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("SubscribeUserInfo")
}

model PastUsers {
  pastUserId       String   @id @default(uuid()) @map("pastUserId")
  pastUserName     String   @map("pastUserName")
  pastUserLoginId  String   @map("pastUserLoginId")
  pastUserPhoneNum String   @map("pastUserPhoneNum")
  pastUserAddress  String   @map("pastUserAddress") @db.Text
  pastUserEmail    String   @map("pastUserEmail")
  pastUserJoinDate DateTime @map("pastUserJoinDate")

  @@map("PastUsers")
}

model DaumFeedLog {
  id           Int      @id @default(autoincrement()) @map("id")
  ArticleId    Int?     @map("ArticleId")
  contentId    String?  @map("contentId") @db.VarChar(500)
  uuid         String?  @map("uuid") @db.VarChar(64)
  action       String   @map("action")
  status       String?  @map("status")
  requestBody  String?  @map("requestBody") @db.MediumText
  responseBody String?  @map("responseBody") @db.MediumText
  errorMessage String?  @map("errorMessage") @db.Text
  createdAt    DateTime @default(now()) @map("createdAt")

  article Article? @relation(fields: [ArticleId], references: [articleId])

  @@index([ArticleId])
  @@index([contentId])
  @@index([uuid])
  @@map("DaumFeedLog")
}
